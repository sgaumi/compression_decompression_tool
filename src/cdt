#!/bin/bash

''':'

result1=$(exec python3 --version 2>&1) ; ret1=$?
result2=$(exec python2 --version 2>&1) ; ret2=$?

comp=true
#module="Huffman"	#default module when it works
module="testcompression"

while getopts dcm:f: ops
	do case $ops in 
		d)	comp=false ;;
		c)	comp=true ;;
		m)	module=$OPTARG ;;
		f)	files=$OPTARG ;; 
		[?])	echo "Usage: $0 [-c | -d] [-m module] [-f file | -f 'file1 file2 ...']" ; exit 1	
	esac
done

mod=$module
if [ ${module: -4} == ".cpp" ] ; then
	echo "try to build module from $module..."
	c++ -O3 -Wall -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` $module -o ${module%.cpp}`python3-config --extension-suffix`
	module=${module%.cpp}
fi
try1=$(exec python3 -c "import $module" 2>&1) ; er=$?
if [ $er -ne 0 ] ; then
	echo "not able to import $mod as a module or build a module from $mod"
	exit 1
fi

	
if $comp ; then
	comp="comp=True"
else
	comp="comp=False"
fi

if [ $ret1 -ne 0 ] ; then
	if [ $ret2 -ne 0 ] ; then	
		echo "Error : Not able to execute python3 or python2"
	else
		echo "script run using $result2"
		python2 -c "from $module import compression,decompression;$comp;$(cat $0)" $files
	fi
else
	echo "script run using $result1"
	python3 -c "from $module import compression,decompression;$comp;$(cat $0)" $files
fi
	
exit 0

':'''

import sys
import os.path
import struct


def c_to_hex_b(c2):
    c=[]
    for i in c2:
        if i=='f' or i=='F':
            c.append(15)
        elif i=='e' or i=='E':
            c.append(14)
        elif i=='d' or i=='D':
            c.append(13)
        elif i=='c' or i=='C':
            c.append(12)
        elif i=='b' or i=='B':
            c.append(11)
        elif i=='a' or i=='A':
            c.append(10)
        else:
            c.append(int(i))
    return c[0]*16+c[1]

def wf_hex(hexa,f):
    n=len(hexa)//2
    if len(hexa)%2!=0:
        hexa=hexa+'0'
        n+=1
    for i in range(n):
        f.write(struct.pack("B",c_to_hex_b(hexa[i*2:i*2+2])))

#### get file names ####

all_file=[]
if len(sys.argv)==1:
	while(len(all_file)==0):
		input_file=input("Enter file name(s) : ")
		index=[-1]
		for i in range(len(input_file)):
			if input_file[i]==' ':
				index.append(i)
		index.append(len(input_file))
		all_file=[]
		for i in range(len(index)-1):
			file_i=input_file[index[i]+1:index[i+1]]
			if(len(file_i)!=0):
				all_file.append(file_i)
else:
	for i in range(1,len(sys.argv)):
		all_file.append(sys.argv[i])

#print(all_file) #test
	
########################

##### Compression ######

if comp:
	print("COMPRESSION")
	for i in range(len(all_file)):
		fname=all_file[i]
		if os.path.exists(fname)==False:
			print("file {} not found".format(fname))
		else:
			print("file {} found".format(fname))
			fr=open(fname,"rb")
			contenu=fr.read()
			#print(contenu) #test
			fr.close()
			
			fcreate=fname+".cdt"
			choice='a'
			if os.path.exists(fcreate):
				print("Warning : {} already exist. Do you allow the process to override it?".format(fcreate))
				while(choice!='y' and choice!='n'):
					choice=input("y : delete the file and process compression | n : keep the file and cancel compression (for this file only) : ")
				if choice=='y':
					fw=open(fcreate,"wb")
			else:	
				fw=open(fcreate,"xb")
			if choice!='n':

				comp_contenu=compression(contenu)
			
				wf_hex(comp_contenu,fw)

				fw.close()

				print("compression done for {}".format(fname))

###########################

###### Decompression ######

else:
	print("DECOMPRESSION")
	for i in range(len(all_file)):
		fname=all_file[i]
		if os.path.exists(fname)==False:
			print("file {} not found".format(fname))
		else:
			print("file {} found".format(fname))
			fr=open(fname,"rb")
			contenu=fr.read()
			#print(contenu) #test
			fr.close()

			choice='a'
			if fname[-4:]==".cdt":
				fcreate=fname[:-4]
			else:
				print("Warning : {} is maybe not a compressed file (extension is not .cdt). Do you still want to perform decompression on this file? (it may not work).".format(fname))
				while(choice!='y' and choice!='n'):
					choice=input("y : yes | n : no : ")
				fcreate=fname

			if choice!='n':
				choice='a'
				if os.path.exists(fcreate):
					print("Warning : {} already exist. Do you allow the process to override it?".format(fcreate))
					while(choice!='y' and choice!='n'):
						choice=input("y : delete the file and process decompression | n : keep the file and cancel decompression (for this file only) : ")
					if choice=='y':
						fw=open(fcreate,"w")
				else:	
					fw=open(fcreate,"x")

			if choice!='n':

				decomp_contenu=decompression(contenu.hex())

				fw.write(decomp_contenu)

				fw.close()

				print("decompression done for {}".format(fname))

##################################
